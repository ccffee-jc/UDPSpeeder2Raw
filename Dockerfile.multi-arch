# 多架构支持的Dockerfile
ARG TARGETPLATFORM
ARG BUILDPLATFORM

FROM --platform=$BUILDPLATFORM node:18-alpine AS builder

# 安装构建依赖
RUN apk add --no-cache \
    bash \
    jq

WORKDIR /app

# 复制并安装Node.js依赖
COPY src/package.json ./
RUN npm ci --only=production && npm cache clean --force

# 运行时镜像
FROM node:18-alpine

# 安装系统依赖
RUN apk add --no-cache \
    bash \
    jq \
    zip \
    p7zip \
    curl \
    wget \
    lsof \
    procps \
    iproute2 \
    iptables \
    ca-certificates \
    tzdata

# 设置时区
ENV TZ=Asia/Shanghai

# 创建应用目录
WORKDIR /app

# 从构建阶段复制node_modules
COPY --from=builder /app/node_modules ./node_modules

# 复制应用源码
COPY src/ ./

# 复制UDPSpeeder2Raw相关文件
COPY config.json ./
COPY *.sh ./

# 根据目标架构复制对应的二进制文件
ARG TARGETARCH
COPY speederv2_${TARGETARCH:-amd64} ./speederv2
COPY udp2raw_${TARGETARCH:-amd64} ./udp2raw

COPY client/ ./client/
COPY templates/ ./templates/

# 设置文件权限
RUN chmod +x *.sh speederv2 udp2raw && \
    find client/ -name "*.exe" -exec chmod +x {} \; || true

# 创建必要的目录
RUN mkdir -p logs client_out

# 创建非root用户
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

# 设置目录权限
RUN chown -R nextjs:nodejs /app

# 切换到非root用户
USER nextjs

# 暴露端口
EXPOSE 3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:3000/ || exit 1

# 启动应用
CMD ["node", "server.js"]
